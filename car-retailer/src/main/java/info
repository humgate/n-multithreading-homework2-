synchronized, wait, notify
Краткая выжимка по материалам javarush.ru:

В Java есть встроенный механизм управления доступом к общим ресурсам (объектам) из разных потоков. Поток может
объявить какой-нибудь объект занятым, и другие потоки будут вынуждены ждать, пока занятый объект не освободится.
Делается это с помощью ключевого слова synchronized. Если два потока одновременно подойдут к
synchronized (monitor) {…} блоку, то один из них войдет в блок, и заблокирует monitor, а второй поток будет стоять
и ждать, пока монитор не освободится. Как только поток, захвативший монитор выйдет из блока, монитор освободится и
другой поток в него зайдет и сам заблокирует монитор.

Вызов метода monitor.wait() приводит к тому, что поток освобождает монитор и «становится на паузу». Метод wait можно
вызвать у объекта-монитора и только тогда, когда это монитор занят – т.е. внутри блока synchronized. При этом поток
временно прекращает работу, а монитор освобождается, чтобы им могли воспользоваться другие потоки. Часто встречаются
ситуации, когда в блок synchronized зашел поток, вызвал там wait, освободил монитор. Затем туда вошел второй поток и
тоже встал на паузу, затем третий и так далее.

Чтобы снять поток(и) с паузы есть методы monitor.notify() и monitor.notifyAll(). Их можно вызывать у объекта-монитора
и только, когда этот монитор занят – т.е. внутри блока synchronized. Метод notifyAll снимает с паузы все потоки,
которые встали на паузу с помощью данного объекта-монитора. Метод notify «размораживает» один случайный поток из тех
что встали на паузу методом wait.